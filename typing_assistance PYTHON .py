# -*- coding: utf-8 -*-
"""Typing assistance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rAMYL002rd0FwHvukRqxrFkVbjQLTjwk
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# --- Step 1: Load Dataset ---
df = pd.read_csv("C:\Users\hp\Downloads\typing_assistant_dataset.csv")  # Update path if needed

features = ["dwell_time", "flight_time", "backspaces", "incorrect_words", "spelling_errors", "word_order_errors"]
target = "requires_assistance"

X = df[features]
y = df[target]

# --- Step 2: Train/Test Split & Model Training ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# --- Step 3: Accuracy and Classification Report ---
y_pred = model.predict(X_test)

print("\nðŸŽ¯ Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Classification Report:\n", classification_report(y_test, y_pred))

# --- Step 4: Autocorrect Logic ---
def autocorrect_sentence(typed):
    corrections = {
        "lik": "like", "eatt": "eat", "appls": "apples",
        "dont": "doesn't", "now": "know", "anser": "answer",
        "Plase": "Please", "documant": "document",
        "schoool": "school", "everdyay": "every day",
        "Im": "I'm", "sory": "sorry", "teh": "the",
        "is going": "are going", "in sited mat the on": "sat on the mat"
    }
    for wrong, right in corrections.items():
        typed = typed.replace(wrong, right)
    return typed

# --- Step 5: Test a New Sample ---

typed_sentence = "Im sory for teh mistake"
features_input = {
    "dwell_time": 125,
    "flight_time": 150,
    "backspaces": 6,
    "incorrect_words": 3,
    "spelling_errors": 2,
    "word_order_errors": 0
}

# Predict and output
X_new = pd.DataFrame([features_input])
predicted_label = model.predict(X_new)[0]

if predicted_label == 1:
    corrected = autocorrect_sentence(typed_sentence)
    print("\nðŸ›  Assistance Required")
    print("Corrected Sentence:", corrected)
else:
    print("\nâœ… No Assistance Needed")
    print("Typed Sentence is fine:", typed_sentence)